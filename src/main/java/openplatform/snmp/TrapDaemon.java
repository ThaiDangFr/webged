package openplatform.snmp;

import openplatform.snmp.stack.*;
import openplatform.database.dbean.*;
import openplatform.tools.*;
import openplatform.database.*;

/**
 * TrapDaemon.java
 *
 *
 * Created: Tue Jun 21 17:00:38 2005
 *
 * @author Thai Dang
 * @version 1.0
 */
public class TrapDaemon implements TrapListener
{
    public static final int PORT = 162;

    public TrapDaemon()
        throws Exception
    {
        DefaultTrapContext trapContext = DefaultTrapContext.getInstance(PORT);
        trapContext.addTrapListener(this);
    }
 

    public void trapReceived(TrapEvent evt)
    {

        Debug.println(this, Debug.DEBUG, "TRAP RECEIVED");

        DBSnmpAlert alert = new DBSnmpAlert();
        alert.setLevel(DBSnmpAlert.LEVEL_DEBUG);

        String descr = "";
        String ipAddr = evt.getHostAddress();

        DBSnmpHost hmask = new DBSnmpHost();
        hmask.setIpAddress(ipAddr);
        DBSnmpHost h = DBSnmpHost.loadByKey(hmask);
            
        try
        {
            if(h != null)
            {
                SnmpFactory.reloadSnmp(h.getSnmpHostId());
                SnmpAbstract sa = SnmpFactory.getSnmp(h.getSnmpHostId());
                Pdu trapPdu = sa.processIncomingTrap(evt);
                int genericTrap = 0;

                if(trapPdu instanceof TrapPduv1)
                {
                    TrapPduv1 t1 = (TrapPduv1)trapPdu;
                    StringBuffer sb = new StringBuffer();
                    sb.append("[Generated by : ").append(t1.getEnterprise()).append("] ");
                    sb.append("[Generic trap name : ").append(t1.getGenericTrapString()).append("] ");
                    sb.append("[Specific trap code : ").append(t1.getSpecificTrap()).append("]");
                    descr = sb.toString();
                    genericTrap = t1.getGenericTrap();
                }
                else
                {
                    TrapPduv2 t2 = (TrapPduv2)trapPdu;
                    descr = t2.toString();

                    varbind[] vb = t2.getResponseVarbinds();
                    if(vb != null)
                    {
                        StringBuffer sb = new StringBuffer();
                        DBSnmpOID omask = new DBSnmpOID();
                        int len = vb.length;
                        
                        for(int i=0; i<len; i++)
                        {
                            String oid = vb[i].getOid().getValue();
                            String value = vb[i].getValue().toString();
                                                        
                            if("1.3.6.1.6.3.1.1.4.1.0".equals(oid)) // SNMPTRAPOID
                            {
//                                 omask.clear();
//                                 omask.setOid(value);
//                                 DBSnmpOID o = DBSnmpOID.loadByKey(omask);
//                                 if(o != null) sb.append("[Trap name : ")
//                                                   .append(o.getMibName()).append("_").append(o.getCaptorName())
//                                                   .append("] ");

                                if("1.3.6.1.6.3.1.1.5.1".equalsIgnoreCase(value)) { genericTrap = 2; sb.append("[coldstart]"); } // coldstart    
                                else if("1.3.6.1.6.3.1.1.5.2".equalsIgnoreCase(value)) { genericTrap = 3; sb.append("[warmstart]"); }// warmstart      
                                else if("1.3.6.1.6.3.1s.1.5.4".equalsIgnoreCase(value)) { genericTrap = 6; sb.append("[linkdown]"); } // linkdown      
                                else if("1.3.6.1.6.3.1.1.5.4".equalsIgnoreCase(value)) { genericTrap = 4; sb.append("[linkup]"); } // linkup             
                                else if("1.3.6.1.6.3.1.1.5.5".equalsIgnoreCase(value)) { genericTrap= 5; sb.append("[authenticationFailure]"); } // authenticationFailure         
                                else if("1.3.6.1.2.1.80.0.1".equalsIgnoreCase(value)) { genericTrap = 6; sb.append("[pingProbeFailed]"); } //pingProbeFailed
                                else if("1.3.6.1.2.1.80.0.2".equalsIgnoreCase(value)) { genericTrap=6; sb.append("[pingTestFailed]"); } //pingTestFailed
                                else if("1.3.6.1.2.1.80.0.3".equalsIgnoreCase(value)) { genericTrap=6; sb.append("[pingTestCompleted]"); } //pingTestCompleted
                                else if("1.3.6.1.2.1.81.0.1".equalsIgnoreCase(value)) { genericTrap=6; sb.append("[traceRoutePathChange]"); } //traceRoutePathChange
                                else if("1.3.6.1.2.1.81.0.2".equalsIgnoreCase(value)) { genericTrap=6; sb.append("[traceRouteTestFailed]"); } //traceRouteTestFailed
                                else if("1.3.6.1.2.1.81.0.3".equalsIgnoreCase(value)) { genericTrap=6; sb.append("[traceRouteTestCompleted]"); } //traceRouteTestCompleted
                                else if("1.3.6.1.2.1.68.0.1".equalsIgnoreCase(value)) { genericTrap=4;  sb.append("[vrrpTrapNewMaster]"); }//vrrpTrapNewMaster
                                else if("1.3.6.1.2.1.68.0.2".equalsIgnoreCase(value)) { genericTrap=4; sb.append("[vrrpTrapAuthFailure]"); } //vrrpTrapAuthFailure
                            }
                            else if("1.3.6.1.6.3.1.1.4.3.0".equals(oid)) // SNMPTRAPENTERPRISE
                            {
                                sb.append(" [Generated by : ").append(value).append("] ");
                            }
                        }
                        descr = sb.toString();
                    }
                }

                switch(genericTrap)
                {
                case 0: alert.setLevel(DBSnmpAlert.LEVEL_EMERGENCY); break;
                case 1: alert.setLevel(DBSnmpAlert.LEVEL_ALERT); break;
                case 2: alert.setLevel(DBSnmpAlert.LEVEL_CRITICAL); break;
                case 3: alert.setLevel(DBSnmpAlert.LEVEL_ERROR); break;
                case 4: alert.setLevel(DBSnmpAlert.LEVEL_WARNING); break;
                case 5: alert.setLevel(DBSnmpAlert.LEVEL_NOTICE); break;
                case 6: alert.setLevel(DBSnmpAlert.LEVEL_INFORMATIONAL); break;
                case 7: alert.setLevel(DBSnmpAlert.LEVEL_DEBUG); break;
                }

            }
        }
        catch(Exception e)
        {
            Debug.println(this, Debug.ERROR, e);
            descr = "CAN'T DECODE THE MESSAGE TRAP : "+e.getMessage();
        }

            
        alert.setType(DBSnmpAlert.TYPE_TRAP);
        alert.setSource(ipAddr);
        alert.setDescription(descr);
        alert.setDate(SQLTime.getSQLTime(System.currentTimeMillis()));
        alert.store();

    }


    // USED BY OPTRAPD STARTING SCRIPT
    public static void main(String[] args)
        throws Exception
    {
        new TrapDaemon();
    }
}
